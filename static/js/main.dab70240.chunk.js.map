{"version":3,"sources":["components/Card/Card.jsx","components/Card List/CardList.jsx","components/SearchBox/SearchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","Promise","resolve","reject","axios","get","then","response","data","catch","failedValue","console","log","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sVAIaA,EAAO,SAACC,GAEjB,OACI,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCNbC,G,MAAW,SAACR,GACzB,OACI,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAEtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCPlBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOZ,UAAY,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCoCnEG,G,wDAjCb,aAAc,IAAD,8BACX,gBAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAdpC,EAAKC,MAAM,CACTb,SAAS,GACTU,YAAc,IAJL,E,qDAOb,WAAoB,IAAD,OACA,IAAII,SAAQ,SAACC,EAAQC,GACpCD,EAAQE,IAAMC,IAAI,kDAEZC,MAAK,SAACC,GACZ,EAAKX,SAAS,CAACT,SAASoB,EAASC,UAChCC,OAAM,SAAAC,GAAW,OAAEC,QAAQC,IAAIF,Q,oBAKpC,WACE,MAA8BG,KAAKb,MAA5Bb,EAAP,EAAOA,SAASU,EAAhB,EAAgBA,YACViB,EAAmB3B,EAAS4B,QAAO,SAACjC,GAAD,OACzCA,EAAQE,KAAKgC,cAAcC,SAASpB,EAAYqB,wBAEhD,OACE,sBAAKvC,UAAU,MAAf,UACA,kDACA,cAAC,EAAD,CAAYW,YAAY,kBAAkBC,aAAcsB,KAAKtB,eAC7D,cAAC,EAAD,CAAUJ,SAAY2B,W,GA5BVK,IAAMC,YCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.dab70240.chunk.js","sourcesContent":["import React from \"react\";\r\nimport'./card.styles.css'\r\n\r\n\r\nexport const Card = (props) => {\r\n\r\n    return(\r\n        <div className='card-container'>\r\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}","import React from \"react\";\r\nimport { Card } from \"../Card/Card\";\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = (props) => {\r\nreturn(\r\n    <div className='card-list'>\r\n    {\r\n        props.monsters.map(monster=>\r\n          (\r\n            <Card key={monster.id} monster={monster} />\r\n            )\r\n        )\r\n      }\r\n    </div>\r\n)\r\n}","import React from \"react\";\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input className = 'search' type='search' placeholder={placeholder} onChange={handleChange} />\r\n)","import React from 'react';\nimport axios from 'axios';\nimport { CardList } from './components/Card List/CardList';\nimport { SearchBox } from './components/SearchBox/SearchBox';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state={\n      monsters:[],\n      searchField : ''\n    }\n  }\n  componentDidMount(){\n    const promise =  new Promise((resolve,reject)=>{\n      resolve(axios.get('https://jsonplaceholder.typicode.com/users'))\n    })\n    promise.then((response)=>{\n      this.setState({monsters:response.data})\n    }).catch(failedValue=>console.log(failedValue))\n  }\n  handleChange = (e) => {\n    this.setState({searchField:e.target.value})\n  }\n  render(){\n    const {monsters,searchField}= this.state;\n    const filteredMonsters = monsters.filter((monster)=> \n    monster.name.toLowerCase().includes(searchField.toLocaleLowerCase()) \n    )\n    return(\n      <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox  placeholder='Search Monsters' handleChange={this.handleChange} />\n      <CardList monsters = {filteredMonsters} />\n    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}